from telethon import TelegramClient, events
from telethon.tl.functions.messages import GetDialogsRequest
from telethon.tl.types import InputPeerEmpty
from telethon.errors import (
    UsernameNotOccupiedError,
    UsernameInvalidError,
    FloodWaitError,
    UserDeactivatedError,
    ChatWriteForbiddenError
)
import asyncio
import os
from dotenv import load_dotenv
import time
import logging
from aiogram import Bot
from datetime import datetime, timedelta
import json

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –î–∞–Ω—ñ –¥–ª—è –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
API_ID = os.getenv('API_ID')
API_HASH = os.getenv('API_HASH')
PHONE = os.getenv('PHONE')
BOT_TOKEN = os.getenv('TELEGRAM_TOKEN')

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç—ñ–≤
client = TelegramClient('anon', API_ID, API_HASH)
bot = Bot(token=BOT_TOKEN)

# –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –º—ñ–∂ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ (2 –≥–æ–¥–∏–Ω–∏)
COOLDOWN_HOURS = 2

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —á–∞—Ç—ñ–≤ —Ç–∞ —ó—Ö –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
active_chats = {}

def load_excluded_users():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å"""
    excluded_users = set()
    if os.path.exists('excluded_users.txt'):
        with open('excluded_users.txt', 'r', encoding='utf-8') as f:
            for line in f:
                if line.strip() and not line.startswith('#'):
                    excluded_users.add(line.strip())
    return excluded_users

def load_last_message_times():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    last_times = {}
    if os.path.exists('last_messages.txt'):
        with open('last_messages.txt', 'r', encoding='utf-8') as f:
            for line in f:
                if line.strip():
                    user_id, timestamp = line.strip().split('|')
                    last_times[user_id] = datetime.fromisoformat(timestamp)
    return last_times

def save_last_message_time(user_id: str):
    """–ó–±–µ—Ä—ñ–≥–∞—î —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    current_time = datetime.now()
    last_times = load_last_message_times()
    last_times[user_id] = current_time
    
    with open('last_messages.txt', 'w', encoding='utf-8') as f:
        for uid, time in last_times.items():
            f.write(f"{uid}|{time.isoformat()}\n")

def can_send_message(user_id: str) -> tuple[bool, str]:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    excluded_users = load_excluded_users()
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ —Å–ø–∏—Å–∫—É –≤–∏–∫–ª—é—á–µ–Ω—å
    if user_id in excluded_users:
        return True, ""
    
    last_times = load_last_message_times()
    current_time = datetime.now()
    
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if user_id not in last_times:
        return True, ""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    last_message_time = last_times[user_id]
    time_diff = current_time - last_message_time
    
    if time_diff < timedelta(hours=COOLDOWN_HOURS):
        remaining_time = timedelta(hours=COOLDOWN_HOURS) - time_diff
        hours = int(remaining_time.total_seconds() // 3600)
        minutes = int((remaining_time.total_seconds() % 3600) // 60)
        return False, f"‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç"
    
    return True, ""

async def notify_user(user_id: str, message: str):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    try:
        logging.info(f"–°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
        await bot.send_message(chat_id=int(user_id), text=message)
        logging.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}")
        return True
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id}: {e}")
        return False

async def forward_message(target_username: str, message: str):
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ @ —è–∫—â–æ –≤—ñ–Ω —î
        target_username = target_username.lstrip('@')
        logging.info(f"–°–ø—Ä–æ–±–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ {target_username}")
        
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ü—ñ–ª—å–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        target_user = await client.get_entity(target_username)
        logging.info(f"–¶—ñ–ª—å–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {target_user.first_name}")
        
        # –§–æ—Ä–º—É—î–º–æ –ø–æ–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è–º —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –±–æ—Ç–∞
        full_message = f"üíå –ü—Ä–∏–≤–µ—Ç! –¢–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message}\n\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º—É-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ—Ç –Ω–∞—à –±–æ—Ç @anonim_messagessbot"
        
        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        sent_message = await client.send_message(target_user, full_message)
        logging.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ {target_user.first_name}")
        return True, None, sent_message.id
    except UsernameNotOccupiedError:
        error_msg = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º username –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π"
        logging.error(error_msg)
        return False, error_msg, None
    except UsernameInvalidError:
        error_msg = "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç username"
        logging.error(error_msg)
        return False, error_msg, None
    except FloodWaitError as e:
        error_msg = f"–ó–∞–±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–±. –°–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {e.seconds} —Å–µ–∫—É–Ω–¥"
        logging.error(error_msg)
        return False, error_msg, None
    except UserDeactivatedError:
        error_msg = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π"
        logging.error(error_msg)
        return False, error_msg, None
    except ChatWriteForbiddenError:
        error_msg = "–ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (–≤—ñ–Ω –Ω–µ –ø—Ä–∏–π–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)"
        logging.error(error_msg)
        return False, error_msg, None
    except Exception as e:
        error_msg = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ: {str(e)}"
        logging.error(error_msg)
        return False, error_msg, None

def normalize_username(username: str) -> str:
    """–ù–æ—Ä–º–∞–ª—ñ–∑—É—î username –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è"""
    return username.lower().strip()

async def process_single_application(application: str, processed_ids: set, failed_ids: set):
    """–û–±—Ä–æ–±–ª—è—î –æ–¥–Ω—É –∑–∞—è–≤–∫—É"""
    try:
        if not application.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏
            return False

        parts = application.strip().split('|')
        user_id = parts[0]
        username = parts[1]
        message = parts[2]
        reply_count = int(parts[3]) if len(parts) > 3 else 0
        
        logging.info(f"–û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –¥–æ {username}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º–æ–∂–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        can_send, cooldown_message = can_send_message(user_id)
        if not can_send:
            await notify_user(user_id, cooldown_message)
            return True
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        success, error_msg, message_id = await forward_message(username, message)
        
        if success:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            save_last_message_time(user_id)
            
            # –î–æ–¥–∞—î–º–æ ID –¥–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö
            processed_ids.add(user_id)
            with open('processed_ids.txt', 'a', encoding='utf-8') as f:
                f.write(f"{user_id}\n")
            
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ö–æ—á–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if reply_count > 0:
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç
                chat_info = {
                    'user_id': user_id,
                    'username': username,
                    'message_id': message_id,
                    'reply_count': reply_count,
                    'replies_received': 0
                }
                active_chats[normalize_username(username)] = chat_info
                logging.info(f"–ó–±–µ—Ä–µ–∂–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —á–∞—Ç: {chat_info}")
                
                # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Ç–∞ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                await notify_user(user_id, f"‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫ {reply_count} –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª—è.")
            else:
                # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ —É—Å–ø—ñ—à–Ω—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É
                await notify_user(user_id, "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            return True
        else:
            # –î–æ–¥–∞—î–º–æ ID –¥–æ –Ω–µ–≤–¥–∞–ª–∏—Ö
            failed_ids.add(user_id)
            with open('failed_ids.txt', 'a', encoding='utf-8') as f:
                f.write(f"{user_id}|{error_msg}\n")
            
            # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
            await notify_user(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{error_msg}")
            return True
            
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∫–∏: {e}")
        return False

@client.on(events.NewMessage)
async def handle_new_message(event):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        sender = await event.get_sender()
        username = sender.username or sender.first_name
        normalized_username = normalize_username(username)
        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {username} (–Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π: {normalized_username})")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if normalized_username in active_chats:
            chat_info = active_chats[normalized_username]
            logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π —á–∞—Ç: {chat_info}")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –Ω–µ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
            if chat_info['replies_received'] < chat_info['reply_count']:
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
                await notify_user(
                    chat_info['user_id'],
                    f"üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username}:\n\n{event.message.text}"
                )
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_info['user_id']}")
                
                # –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                chat_info['replies_received'] += 1
                logging.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤: {chat_info['replies_received']}/{chat_info['reply_count']}")
                
                # –Ø–∫—â–æ –¥–æ—Å—è–≥–Ω—É—Ç–æ –ª—ñ–º—ñ—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π, –≤–∏–¥–∞–ª—è—î–º–æ —á–∞—Ç
                if chat_info['replies_received'] >= chat_info['reply_count']:
                    del active_chats[normalized_username]
                    await notify_user(
                        chat_info['user_id'],
                        f"‚ÑπÔ∏è –í—ã –ø–æ–ª—É—á–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {username}."
                    )
                    logging.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª —Å–æ–æ–±—â–µ–Ω–∏–π, —á–∞—Ç —É–¥–∞–ª–µ–Ω")
            else:
                # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É
                await event.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.")
                logging.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def process_applications():
    processed_ids = set()
    failed_ids = set()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª–∏, —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ —ñ—Å–Ω—É—é—Ç—å
    if os.path.exists('processed_ids.txt'):
        with open('processed_ids.txt', 'r', encoding='utf-8') as f:
            processed_ids = set(line.strip() for line in f)
    if os.path.exists('failed_ids.txt'):
        with open('failed_ids.txt', 'r', encoding='utf-8') as f:
            failed_ids = set(line.strip() for line in f)
    
    while True:
        try:
            if os.path.exists('applications.txt'):
                with open('applications.txt', 'r', encoding='utf-8') as f:
                    applications = f.readlines()
                
                if applications:  # –Ø–∫—â–æ —î –Ω–æ–≤—ñ –∑–∞—è–≤–∫–∏
                    logging.info(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(applications)} –Ω–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫")
                    # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –∑–∞—è–≤–∫–∏
                    remaining_applications = []
                    for application in applications:
                        if await process_single_application(application, processed_ids, failed_ids):
                            logging.info("–ó–∞—è–≤–∫–∞ —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞")
                        else:
                            remaining_applications.append(application)
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Ñ–∞–π–ª –∑ –∑–∞–ª–∏—à–∏–≤—à–∏–º–∏—Å—è –∑–∞—è–≤–∫–∞–º–∏
                    with open('applications.txt', 'w', encoding='utf-8') as f:
                        f.writelines(remaining_applications)
                    logging.info(f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å {len(remaining_applications)} –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –∑–∞—è–≤–æ–∫")
            
            # –ß–µ–∫–∞—î–º–æ 0.5 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
            await asyncio.sleep(0.5)
            
        except Exception as e:
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–æ–∫: {e}")
            await asyncio.sleep(1)

async def main():
    try:
        # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Telegram
        await client.start(phone=PHONE)
        logging.info("–ö–ª—ñ—î–Ω—Ç —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π!")
        logging.info("–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∑–∞—è–≤–æ–∫...")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –∑–∞—è–≤–æ–∫
        await process_applications()
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ –∫–ª—ñ—î–Ω—Ç—ñ: {e}")
        raise
    finally:
        await client.disconnect()
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main()) 