import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import time
import os
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv('BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°—Ç–∞–Ω–∏ –¥–ª—è FSM
class ApplicationStates(StatesGroup):
    waiting_for_username = State()
    waiting_for_message = State()
    waiting_for_reply_choice = State()
    waiting_for_reply_count = State()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
cancel_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
    resize_keyboard=True
)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
def get_reply_count_keyboard():
    keyboard = []
    for i in range(1, 16):
        keyboard.append([InlineKeyboardButton(text=str(i), callback_data=f"reply_count_{i}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ü§ñ\n\n"
        "–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")]],
            resize_keyboard=True
        )
    )

# –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"
@dp.message(lambda message: message.text == "‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def start_application(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–±–µ–∑ —Å–∏–º–≤–æ–ª–∞ @):",
        reply_markup=cancel_keyboard
    )
    await state.set_state(ApplicationStates.waiting_for_username)

# –û–±—Ä–æ–±–Ω–∏–∫ username
@dp.message(ApplicationStates.waiting_for_username)
async def process_username(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")]],
                resize_keyboard=True
            )
        )
        return

    await state.update_data(username=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:")
    await state.set_state(ApplicationStates.waiting_for_message)

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@dp.message(ApplicationStates.waiting_for_message)
async def process_message(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")]],
                resize_keyboard=True
            )
        )
        return

    data = await state.get_data()
    username = data['username']
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Å—Ç–∞–Ω—ñ
    await state.update_data(message=message.text)
    
    # –ó–∞–ø–∏—Ç—É—î–º–æ –ø—Ä–æ –±–∞–∂–∞–Ω–Ω—è –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="want_reply_yes")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="want_reply_no")]
            ]
        )
    )
    await state.set_state(ApplicationStates.waiting_for_reply_choice)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
@dp.callback_query(ApplicationStates.waiting_for_reply_choice)
async def process_reply_choice(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "want_reply_no":
        data = await state.get_data()
        username = data['username']
        message = data['message']
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–∫—É —É —Ñ–∞–π–ª –±–µ–∑ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
        with open('applications.txt', 'a', encoding='utf-8') as f:
            f.write(f"{callback.from_user.id}|{username}|{message}|0\n")
        
        await callback.message.edit_text(
            "‚è≥ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚úâÔ∏è–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")]],
                resize_keyboard=True
            )
        )
        await state.clear()
        return

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å (–æ—Ç 1 –¥–æ 15):",
        reply_markup=get_reply_count_keyboard()
    )
    await state.set_state(ApplicationStates.waiting_for_reply_count)

# –û–±—Ä–æ–±–Ω–∏–∫ –≤–∏–±–æ—Ä—É –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
@dp.callback_query(ApplicationStates.waiting_for_reply_count)
async def process_reply_count(callback: types.CallbackQuery, state: FSMContext):
    reply_count = int(callback.data.split('_')[2])
    data = await state.get_data()
    username = data['username']
    message = data['message']
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–∫—É —É —Ñ–∞–π–ª –∑ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    with open('applications.txt', 'a', encoding='utf-8') as f:
        f.write(f"{callback.from_user.id}|{username}|{message}|{reply_count}\n")
    
    await callback.message.edit_text(
        "‚è≥ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")]],
            resize_keyboard=True
        )
    )
    await state.clear()

